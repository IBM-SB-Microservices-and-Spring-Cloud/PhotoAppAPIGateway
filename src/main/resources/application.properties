#Port will be assigned dynamically
server.port=8082

spring.application.name=api-gateway


#Actuators
management.endpoints.web.exposure.include=beans,health,routes,httptrace,gateway
management.endpoint.gateway.enabled=true
#Actuators End

#Moved 2 SCCServer
#eureka.client.service-url.defaultZone=http://localhost:8010/eureka

################ Automatic Routing Properties Start ################ 
#If we don't want to create custom routes we can use the below two properties. If we want to write custom routes we should not use these 
#The URL should be like: http://localhost:8082/users-service/users/version
#spring.cloud.gateway.discovery.locator.enabled=true

#This property is to make the API Gateway URL is case insensitive
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

################ Auto Routing Properties End ################

################ Custom Routing Properties Start ################

####  USERS-SERVICE Routing Start
spring.cloud.gateway.routes[0].id= users-service-version
spring.cloud.gateway.routes[0].uri= lb://users-service
spring.cloud.gateway.routes[0].predicates[0]= Path=/users/v
spring.cloud.gateway.routes[0].predicates[1]= Method=GET
#This just validates if the request has a Authorization header or not. It don't validates the token
spring.cloud.gateway.routes[0].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[0].filters[0] = RemoveRequestHeader=Cookie
#When we want redirect the request to a differnt path
spring.cloud.gateway.routes[0].filters[1]= RewritePath=/users/v, /users/version
#Applying custom filter to a request
spring.cloud.gateway.routes[0].filters[2]=AuthorizationHeaderFilter

#### USERS-SERVICE Routing End

#### H2 Routing Settings

spring.cloud.gateway.routes[1].id= users-service-h2c
spring.cloud.gateway.routes[1].uri= lb://users-service
spring.cloud.gateway.routes[1].predicates[0]= Path=/users/h2c
spring.cloud.gateway.routes[1].predicates[1]= Method=GET
spring.cloud.gateway.routes[1].filters[0] = RemoveRequestHeader=Cookie
#When we want redirect the request to a differnt path
spring.cloud.gateway.routes[1].filters[1]= RewritePath=/users/h2c, /h2-console

#POST Users
spring.cloud.gateway.routes[2].id= users-service-postusers
spring.cloud.gateway.routes[2].uri= lb://users-service
spring.cloud.gateway.routes[2].predicates[0]= Path=/users
spring.cloud.gateway.routes[2].predicates[1]= Method=POST

#Users Login
spring.cloud.gateway.routes[3].id= users-service-login
spring.cloud.gateway.routes[3].uri= lb://users-service
spring.cloud.gateway.routes[3].predicates[0]= Path=/users/login
spring.cloud.gateway.routes[3].predicates[1]= Method=POST

#Users Actuator
spring.cloud.gateway.routes[4].id= users-service-actuator
spring.cloud.gateway.routes[4].uri= lb://users-service
spring.cloud.gateway.routes[4].predicates[0]= Path=/users/actuator/{segment}
spring.cloud.gateway.routes[4].predicates[1]= Method=GET
#The below RewritePath and SetPath serves the same purpose
spring.cloud.gateway.routes[4].filters[0]= RewritePath=/users/actuator(?<segment>/?.*), /actuator$\{segment}
#spring.cloud.gateway.routes[4].filters[0]= SetPath=/actuator/{segment}

#We can use both Automatic and Custom Routing features together with slight changes. 
#Just Comment RewritePath property and enable Automatic Routing properties.




################ Custom Routing Properties End ################



spring.devtools.restart.enabled=true

#Moved to Spring Cloud Config Server
#token.secret = hfgry463hf746hf573ydh475fhy5739

#Rabbit Mq Details Conn creds
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

